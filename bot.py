from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from config import API_KEY, CURRENCY_API_KEY
import requests
import random

user_budget = {}

# –ö–æ–º–∞–Ω–¥–∞ /start: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def start(update: Update, context) -> None:
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ç–≤–æ–π –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç, –≤–µ—Å—Ç–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –±—é–¥–∂–µ—Ç."
    )

# –ö–æ–º–∞–Ω–¥–∞ /help: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
async def help_command(update: Update, context) -> None:
    await update.message.reply_text(
        "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/budget - –í–µ–¥–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞\n"
        "/currency - –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç\n"
        "/tips - –°–æ–≤–µ—Ç—ã –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏\n"
        "/menu - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"
    )

# –ö–æ–º–∞–Ω–¥–∞ /currency: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—É—Ä—Å –≤–∞–ª—é—Ç
async def currency(update: Update, context) -> None:
    try:
        url = f"https://v6.exchangerate-api.com/v6/{CURRENCY_API_KEY}/latest/USD"
        response = requests.get(url)
        data = response.json()
        rate = data["conversion_rates"]["RUB"]
        await update.message.reply_text(f"–ö—É—Ä—Å USD –∫ RUB: {rate}")
    except Exception as e:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ö–æ–º–∞–Ω–¥–∞ /budget: –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±—é–¥–∂–µ—Ç–æ–º
async def budget(update: Update, context) -> None:
    user_id = update.effective_user.id
    user_budget[user_id] = user_budget.get(user_id, {"income": 0, "expense": 0})
    await update.message.reply_text(
        "–í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥? –í–≤–µ–¥–∏—Ç–µ:\n"
        "- `–¥–æ—Ö–æ–¥ [—Å—É–º–º–∞]`\n"
        "- `—Ä–∞—Å—Ö–æ–¥ [—Å—É–º–º–∞]`\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –¥–æ—Ö–æ–¥ 5000 –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥ 1500",
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
async def handle_budget(update: Update, context) -> None:
    user_id = update.effective_user.id
    text = update.message.text.lower()

    if user_id not in user_budget:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /budget.")
        return

    try:
        if text.startswith("–¥–æ—Ö–æ–¥"):
            amount = int(text.split()[1])
            user_budget[user_id]["income"] += amount
            await update.message.reply_text(f"–î–æ—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω: +{amount} —Ä—É–±.")
        elif text.startswith("—Ä–∞—Å—Ö–æ–¥"):
            amount = int(text.split()[1])
            user_budget[user_id]["expense"] += amount
            await update.message.reply_text(f"–†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω: -{amount} —Ä—É–±.")
        else:
            await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –¥–æ—Ö–æ–¥ [—Å—É–º–º–∞] –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥ [—Å—É–º–º–∞].")
    except (IndexError, ValueError):
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∏–º–µ—Ä: –¥–æ—Ö–æ–¥ 5000 –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥ 1500.")

# –ö–æ–º–∞–Ω–¥–∞ /tips: –°–æ–≤–µ—Ç—ã –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏
async def tips(update: Update, context) -> None:
    tips_list = [
        "–°–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –±—é–¥–∂–µ—Ç –∏ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–≤–æ–∏–º–∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü.",
        "–û—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ 10% —Å–≤–æ–µ–≥–æ –¥–æ—Ö–æ–¥–∞ –Ω–∞ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è.",
        "–ò–∑–±–µ–≥–∞–π—Ç–µ –∏–º–ø—É–ª—å—Å–∏–≤–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ ‚Äî –ø–æ–¥–æ–∂–¥–∏—Ç–µ 24 —á–∞—Å–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π.",
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫–∏–¥–∫–∏ –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏.",
        "–ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ —Å–≤–æ—ë –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ ‚Äî —ç—Ç–æ –ª—É—á—à–∏–π –∞–∫—Ç–∏–≤.",
        "–°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –¥–æ–ª–≥–∏ –≤–æ–≤—Ä–µ–º—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤.",
        "–ì–æ—Ç–æ–≤—å—Ç–µ –µ–¥—É –¥–æ–º–∞ –≤–º–µ—Å—Ç–æ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ ‚Äî —ç—Ç–æ –¥–µ—à–µ–≤–ª–µ –∏ –ø–æ–ª–µ–∑–Ω–µ–µ.",
        "–°—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ —Ü–µ–Ω—ã –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π, —á—Ç–æ–±—ã –Ω–∞—Ö–æ–¥–∏—Ç—å –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.",
    ]
    tip = random.choice(tips_list)
    await update.message.reply_text(f"üí° –°–æ–≤–µ—Ç: {tip}")

# –ö–æ–º–∞–Ω–¥–∞ /menu: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
async def menu(update: Update, context) -> None:
    keyboard = [
        [InlineKeyboardButton("–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç", callback_data="currency")],
        [InlineKeyboardButton("–ë—é–¥–∂–µ—Ç", callback_data="budget")],
        [InlineKeyboardButton("–°–æ–≤–µ—Ç—ã", callback_data="tips")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context) -> None:
    query = update.callback_query
    await query.answer()

    if query.data == "currency":
        await currency(update, context)
    elif query.data == "budget":
        await budget(update, context)
    elif query.data == "tips":
        await tips(update, context)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(API_KEY).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("currency", currency))
    application.add_handler(CommandHandler("budget", budget))
    application.add_handler(CommandHandler("tips", tips))
    application.add_handler(CommandHandler("menu", menu))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_budget))

    application.run_polling()

if __name__ == "__main__":
    main()
